- page_name:
    "pretty"
  speakers:
  -
    name:
      "Jon Pretty"
    bio:
      "<p>Jon (@propensive) has been having fun riding the bleeding edge of
      Scala for over a decade, and he's not done yet. While he's not
      travelling the world attending Scala conferences, or organizing his
      own (Scala World), Jon spends his time working on the open-source
      Rapture libraries. He is principal engineer at The Scala Center.</p>"
    image:
      "pretty.png"
    twitter_handle:
      "@propensive"
    twitter_link:
      "https://twitter.com/propensive"
  title:
    "Contextual: Statically-checked Interpolated Strings for Everyone!"
  type:
    "Presentation"
  abstract:
    '<p>Interpolated strings, like the familiar `s""`, provide a convenient way to embed external DSLs in Scala source, allowing you to construct a new value at runtime from a string literal, with Scala expressions substituted within it.</p>

    <p>But unless you are prepared to implement the interpolator using a macro, the compiler provides no checks on the correctness or well-formedness of the embedded DSL.</p>

    <p>Contextual is a small open-source library which does the heavy lifting work to make it trivial to write string interpolators which run at compile time, without requiring any macro code. A string interpolator which parses and checks a DSL at compile-time -- with its own custom error-messages -- can be written using contextual in just a few lines of ordinary "userspace" code, calling upon parsers, regular expressions or any other means to check the interpolated string.</p>

    <p>This opens up a smorgasbord of possibilities for adding more compile-time safety to Scala code, not least the ability to introduce your own literal-like types, ranging from checked email addresses or URLs to compile-time-parsed YAML, CSS or GraphQL.</p>'

- page_name:
    "torreborre"
  title:
    "Streams, effects and beautiful folds, a winning trilogy"
  type:
    "Presentation"
  abstract:
    '<p>Most applications are just reading data, transforming it and writing it somewhere else. And there are great libraries in the Scala eco-system to support these use cases: Akka-Stream, fs2, Monix,... But if you look under the hood and try to understand how those libraries work you might be a bit scared by their complexity!</p>

    <p>In this talk you will learn how to build a very minimal "streaming library" where all the difficult concerns are left to other libraries: eff for asynchronous computations and resources management, origami for extracting useful data out of the stream. Then you will decide how to spend your complexity budget and when you should pay for more powerful abstractions.</p>'
  speakers:
  -
    name:
      "Erik Torreborre"
    bio:
      "<p>Eric Torreborre is a software developer living in Berlin, working for Zalando. He is the creator of the specs2 library for software specifications in Scala.</p>

      <p>Scala has been his gateway drug to functional programming and made him a more satisfied developer. When he finally understands what he is doing he tries to share it with the rest of the world.</p>"
    image:
      "torreborre.png"
    twitter_handle:
      "@etorreborre"
    twitter_link:
      "https://twitter.com/etorreborre"

- page_name:
    "vitale"
  title:
    "Using Eta for what you don't like writing in Scala"
  type:
    "Presentation"
  abstract:
    '<p>The integration of Scala with a lazy-by-default, modern and statically-typed functional language could lead to some interesting language-heterogeneous implementations despite the fact that the Eta programming language is missing a comprehensive documentation, robust concurrency support and an interactive REPL.</p>

    <p>This talk aims to cover some of those interaction patterns to help both people already working or struggling with Haskell, and through that to also motivate the use of Eta for those still unfamiliar with this "end of the FP spectrum".</p>'
  speakers:
  -
    name:
      "Filippo Vitale"
    bio:
      'Filippo Vitale is a Software Engineer living in Ann Arbor, MI. He has been developing in Scala at Arbor Networks over the past 3 years, with more than a decade of Java and C# development experience.</p>
      <p>When he is not working on real-time analytics systems for Advanced Thread Detection and Threat Intelligence using Scala, Python and C, he enjoys hiking, running and making fresh pasta.</p>'
    image:
      "vitale.png"
    twitter_handle:
      "@filippovitale"
    twitter_link:
      "https://twitter.com/filippovitale"

- page_name:
    "belak"
  title:
    "clojure.spec: a lisp-flavoured type system"
  type:
    "Presentation"
  abstract:
    "<p>You can do cool and unexpected things if your entire type system is a
    first class citizen and accessible at runtime.</p>

    <p>With the introduction of spec, Clojure got its own distinct spin on a
    type system. Just as macros add another -time (runtime and compile time)
    where the full power of the language can be used, spec does to describing
    data. </p>

    <p>The result is an entire additional type system that is a first class
    citizen and accessible at runtime that facilitates validation, generative
    testing (a la QuickCheck), destructuring (pattern matching into deeply
    nested data), data macros (recursive transformations of data) and a
    pluginable error system. And then you can start building on top of it.</p>

    <p>The talk will be half introduction to spec and the ideas packed within
    it, and half experience report instrumenting 15k loc production codebase
    (primarily ETL and analytics) with spec.</p>"
  speakers:
  -
    name:
      "Simon Belak"
    bio:
      "<p>Simon Belak is the Chief Analytics Officer at GoOpti where he is in
       charge of making the company data-driven; building analytics
       infrastructure (end goal: provide any answer stemming from data in 2 min
       or less); and developing a predictive real-time pricing engine.</p>

       <p>Before GoOpti he worked with over 20 startups and growth companies
       helping them become data driven and set up (or level up) their analytics
       departments.</p>"
    image:
      "belak.png"
    twitter_handle:
      "@sbelak"
    twitter_link:
      "https://twitter.com/sbelak"

- page_name:
    "wickstrom"
  title:
    "The Power of Functional Programming and Static Type Systems in Server-Side
    Web Applications"
  type:
    "Presentation"
  abstract:
    "<p>Single-page web applications have been spreading like wildfire, with an
    endless amount of frameworks and libraries, and functional programming
    together with static types fueling the fire with great ideas like pure
    functions, monads, and strong type checking. But what happened to
    Progressive Enhancement? Some parts of our applications might require
    Javascript to function, but the majority could be built with ordinary links
    and forms.</p>

    <p>In this talk we will explore how we can build web applications using
    established web technology, and the power of functional programming and
    PureScript on the server-side, with strong correctness guarantees.</p>"
  speakers:
  -
    name:
      "Oskar Wickström"
    bio:
      "<p>After some years of musical education Oskar Wickström began his
      journey into the world of software, as a self-taught programmer. He
      started a company practicing web design and development for small
      businesses. He now works with CodeScene, a suite of software analysis and
      repository mining products, along with various open source projects on his
      free time.</p>

      <p>Among the technical topics that interest Oskar are functional
      programming, systems design, web technology, and programming languages.
      His more aestetic side, which mostly involves making music, draws him
      towards graphics and UI design every now and then. He’s a bit of a
      restless soul, but it also means he gets a lot done.</p>"
    image:
      "wickstrom.png"
    twitter_handle:
      "@owickstrom"
    twitter_link:
      "https://twitter.com/owickstrom"

- page_name:
    "liodden"
  title:
    "Building a Company on Scala"
  type:
    "Presentation"
  abstract:
    "<p>At any company’s start, they will face of the decision of which
    programming language will define their technology stack.</p>

    <p>For Tapad, this was in 2010, when languages like Scala were in their very
    early stages and many engineers weren’t looking beyond Java.</p>

    <p>It was at that time that CTO and co-founder, Dag Liodden, made the
    decision to use Scala, which arguably provided the technical foundation
    needed to scale Tapad to what it is today -- a 200+ person company,
    managing 20+ PB of data, that was recently acquired for $360 million.</p>

    <p>While adoption has gained significant momentum for Scala since Tapad
    first embraced the language, it is still in the fairly early stages of
    maturity, which poses challenges for experienced and novice Scala developer
    teams alike. In this session, Dag will address the source of some of these
    challenges, how they can be resolved, and how Scala can help deliver high
    quality code at high velocity.</p>

    <p>Ultimately, all leading up to how engineers and entrepreneurs alike can
    overcome these barriers to build a team, or even a whole company, on Scala.
    </p>"
  speakers:
  -
    name:
      "Dag Liodden"
    bio:
      "<p>Dag Liodden is Tapad’s Co-Founder and CTO. Dag oversees all
      technological advancements for the company, including Tapad’s notable
      breakthroughs in delivering targeted advertising across platforms.</p>

      <p>Prior
      to Tapad, he was the co-founder and CTO of Giant Leap Technologies AS,
      the premier Business Mobility solutions provider in the Nordic region.
      While there, Dag managed some of the largest wireless enterprise solution
      rollouts in Europe.</p>

      <p>He began programming at 6-years-old and has a Master’s
      Degree in Science, Industrial Economics and Technology Management from the
      Norwegian University of Science and Technology.</p>"
    image:
      "liodden.png"
    twitter_handle:
      "@daggerrz"
    twitter_link:
      "https://twitter.com/daggerrz"

- page_name:
    "geirsson"
  title:
    "Move fast and automatically refactor things"
  type:
    "Presentation"
  abstract:
    "<p>Move fast and automatically refactor things. That’s my dream at least, and
    I’ve been working hard to make it a reality. Scalafix is a new tool and library
    to create „rewrites” that refactor Scala code.</p>

    <p>Rewrites are composed of „patches”, which is a small algebra of operations
    that can be assembled to run as a single refactoring step. The mission of scalafix
    is to help automate the migration between Scala compiler and library versions.</p>

    <p>In this talk, you will learn how scalafix is implemented on top of scala.meta, a
    metaprogramming toolkit that makes it easy to manipulate Scala code as data. You’ll
    see that anyone can write custom migration scripts with scalafix. By the end of the
    talk, you may be inspired to refactor your company’s internal codebase.</p>"
  speakers:
  -
    name:
      "Ólafur Páll Geirsson"
    bio:
      "<p>Ólafur Páll is an engineer at the Scala Center working on devtools. He is the
      author of scalafmt and a scala.meta maintainer. When Ólafur is not coding, he likes
      to bike up mountain Fløien in Bergen, Norway, where he lives half of the time.</p>"
    image:
      "geirsson.png"
    twitter_handle:
      "@olafurpg"
    twitter_link:
      "https://twitter.com/olafurpg"
